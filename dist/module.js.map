{"mappings":"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","sources":["src/graph.ts"],"sourcesContent":["import Graph from \"graphology\";\nimport { uuidv7 } from \"uuidv7\";\n\ntype NodeId = string;\ntype EdgeId = string;\n\ninterface AttributeMap{\n    [index : string]: any;\n}\n\nclass NiceEntity{\n    graph : NiceGraph;\n    id : string;\n    attrs : AttributeMap;\n    constructor(g : NiceGraph, id : string, attrs : AttributeMap) {\n        this.graph = g;\n        if (id) {\n            this.id = id;\n        } else {\n            this.id = uuidv7();\n        }\n        if (attrs) {\n            this.attrs = new Map(Object.entries(attrs)); \n        }\n    }\n}\n\nclass NiceEdge extends NiceEntity {\n    from : NiceNode;\n    to : NiceNode;\n    nature? : string;\n    constructor(g : NiceGraph, from : NiceNode, to : NiceNode, nature : string, attrs : AttributeMap) {\n        super(g, [from.id, to.id].join(\",\"), attrs);\n        this.from = from;\n        this.to = to;\n        if (nature) {\n            this.nature = nature;\n        }\n    }\n}\n\ntype NodeTraverser = (n : NiceNode) => Promise<any>;\n\nclass NiceNode extends NiceEntity{\n    constructor(g : NiceGraph, id : string, attrs : AttributeMap) {\n        super(g,id,attrs);\n    }\n    OutEdges() : Set<NiceEdge> {\n        return this.graph.entities.OutEdges.get(this);\n    }\n    InEdges() : Set<NiceEdge> {\n        return this.graph.entities.InEdges.get(this);\n    }\n    async Traverse(fn : NodeTraverser) {\n        await fn(this);\n        const promises : Promise<any>[] = [];\n        this.OutEdges().forEach(e => {\n            promises.push(fn(e.to));\n        });\n        return Promise.all(promises);\n    }\n}\n\ninterface GraphDatabase{\n    Nodes: Map<NodeId, NiceNode>\n    Edges: Map<EdgeId, NiceEdge>\n    OutEdges: Map<NiceNode, Set<NiceEdge>>\n    InEdges: Map<NiceNode, Set<NiceEdge>>\n}\n\nclass NiceGraph{\n    ology : Graph;\n    entities: GraphDatabase;\n    constructor(){\n        this.ology = new Graph();\n        this.entities = {\n            Nodes: new Map(),\n            Edges: new Map(),\n            OutEdges: new Map(),\n            InEdges: new Map()\n        };\n    }\n    getNode(id: NodeId) : NiceNode | null {\n        return this.entities.Nodes.get(id);\n    }\n    addNode(id: NodeId, attrs : AttributeMap) : NiceNode {\n        const n = new NiceNode(this, id, attrs);\n        this.ology.addNode(id, attrs);\n        this.entities.Nodes.set(id, n);\n        return n\n    }\n    updateNode(id: NodeId, attrs : AttributeMap) {\n        const n = this.getNode(id);\n        let mergeResult = this.ology.mergeNode(id, attrs);\n        console.info({id, mergeResult});\n        n.attrs = attrs;\n    }\n    deleteNode(id: NodeId) {\n        this.ology.dropNode(id);\n        const n = this.getNode(id);\n        this.entities.Nodes.delete(id);\n        this.entities.InEdges.delete(n);\n        this.entities.OutEdges.delete(n);\n    }\n    getEdge(id : EdgeId) : NiceEdge | null {\n        return this.entities.Edges.get(id);\n    }\n    addEdge(id: EdgeId, attrs : AttributeMap) {\n        const [fromId, toId] = id.split(\",\");\n        const from = this.getNode(fromId);\n        const to = this.getNode(toId);\n        const e = new NiceEdge(this, from, to, \"friend\", attrs);\n        this.entities.Edges.set(id, e);\n        this.entities.OutEdges.get(from).add(e);\n        this.entities.InEdges.get(to).add(e);\n    }\n    updateEdge(id : string, attrs : AttributeMap) {\n        const e = this.getEdge(id);\n        e.attrs = attrs;\n        this.ology.mergeEdgeAttributes(id, attrs);\n    }\n    deleteEdge(id : string) {\n        const e = this.getEdge(id);\n        this.entities.Edges.delete(id);\n        this.entities.OutEdges.get(e.from).delete(e);\n        this.entities.InEdges.get(e.to).delete(e);\n        this.ology.dropEdge(id);\n    }\n}\n\nexport { NiceEdge, NiceGraph, NiceNode };\n\n"],"names":[],"version":3,"file":"module.js.map"}