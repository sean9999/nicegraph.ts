{"mappings":";AAGA,cAAc,MAAM,CAAC;AACrB,cAAc,MAAM,CAAC;AAErB;IACI,CAAC,KAAK,EAAG,MAAM,GAAG,GAAG,CAAC;CACzB;AAED;IACI,KAAK,EAAG,SAAS,CAAC;IAClB,EAAE,EAAG,MAAM,CAAC;IACZ,KAAK,EAAG,YAAY,CAAC;gBACT,CAAC,EAAG,SAAS,EAAE,EAAE,EAAG,MAAM,EAAE,KAAK,EAAG,YAAY;CAW/D;AAED,qBAAe,SAAQ,UAAU;IAC7B,IAAI,EAAG,QAAQ,CAAC;IAChB,EAAE,EAAG,QAAQ,CAAC;IACd,MAAM,CAAC,EAAG,MAAM,CAAC;gBACL,CAAC,EAAG,SAAS,EAAE,IAAI,EAAG,QAAQ,EAAE,EAAE,EAAG,QAAQ,EAAE,MAAM,EAAG,MAAM,EAAE,KAAK,EAAG,YAAY;CAQnG;AAED,qBAAqB,CAAC,CAAC,EAAG,QAAQ,KAAK,OAAO,CAAC,GAAG,CAAC,CAAC;AAEpD,qBAAe,SAAQ,UAAU;gBACjB,CAAC,EAAG,SAAS,EAAE,EAAE,EAAG,MAAM,EAAE,KAAK,EAAG,YAAY;IAG5D,QAAQ,IAAK,GAAG,CAAC,QAAQ,CAAC;IAG1B,OAAO,IAAK,GAAG,CAAC,QAAQ,CAAC;IAGnB,QAAQ,CAAC,EAAE,EAAG,aAAa;CAQpC;AAED;IACI,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAA;IAC5B,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAA;IAC5B,QAAQ,EAAE,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAA;IACtC,OAAO,EAAE,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAA;CACxC;AAED;IACI,KAAK,EAAG,KAAK,CAAC;IACd,QAAQ,EAAE,aAAa,CAAC;;IAUxB,OAAO,CAAC,EAAE,EAAE,MAAM,GAAI,QAAQ,GAAG,IAAI;IAGrC,OAAO,CAAC,EAAE,EAAE,MAAM,EAAE,KAAK,EAAG,YAAY,GAAI,QAAQ;IAMpD,UAAU,CAAC,EAAE,EAAE,MAAM,EAAE,KAAK,EAAG,YAAY;IAM3C,UAAU,CAAC,EAAE,EAAE,MAAM;IAOrB,OAAO,CAAC,EAAE,EAAG,MAAM,GAAI,QAAQ,GAAG,IAAI;IAGtC,OAAO,CAAC,EAAE,EAAE,MAAM,EAAE,KAAK,EAAG,YAAY;IASxC,UAAU,CAAC,EAAE,EAAG,MAAM,EAAE,KAAK,EAAG,YAAY;IAK5C,UAAU,CAAC,EAAE,EAAG,MAAM;CAOzB","sources":["src/src/graph.ts","src/graph.ts"],"sourcesContent":[null,"import Graph from \"graphology\";\nimport { uuidv7 } from \"uuidv7\";\n\ntype NodeId = string;\ntype EdgeId = string;\n\ninterface AttributeMap{\n    [index : string]: any;\n}\n\nclass NiceEntity{\n    graph : NiceGraph;\n    id : string;\n    attrs : AttributeMap;\n    constructor(g : NiceGraph, id : string, attrs : AttributeMap) {\n        this.graph = g;\n        if (id) {\n            this.id = id;\n        } else {\n            this.id = uuidv7();\n        }\n        if (attrs) {\n            this.attrs = new Map(Object.entries(attrs)); \n        }\n    }\n}\n\nclass NiceEdge extends NiceEntity {\n    from : NiceNode;\n    to : NiceNode;\n    nature? : string;\n    constructor(g : NiceGraph, from : NiceNode, to : NiceNode, nature : string, attrs : AttributeMap) {\n        super(g, [from.id, to.id].join(\",\"), attrs);\n        this.from = from;\n        this.to = to;\n        if (nature) {\n            this.nature = nature;\n        }\n    }\n}\n\ntype NodeTraverser = (n : NiceNode) => Promise<any>;\n\nclass NiceNode extends NiceEntity{\n    constructor(g : NiceGraph, id : string, attrs : AttributeMap) {\n        super(g,id,attrs);\n    }\n    OutEdges() : Set<NiceEdge> {\n        return this.graph.entities.OutEdges.get(this);\n    }\n    InEdges() : Set<NiceEdge> {\n        return this.graph.entities.InEdges.get(this);\n    }\n    async Traverse(fn : NodeTraverser) {\n        await fn(this);\n        const promises : Promise<any>[] = [];\n        this.OutEdges().forEach(e => {\n            promises.push(fn(e.to));\n        });\n        return Promise.all(promises);\n    }\n}\n\ninterface GraphDatabase{\n    Nodes: Map<NodeId, NiceNode>\n    Edges: Map<EdgeId, NiceEdge>\n    OutEdges: Map<NiceNode, Set<NiceEdge>>\n    InEdges: Map<NiceNode, Set<NiceEdge>>\n}\n\nclass NiceGraph{\n    ology : Graph;\n    entities: GraphDatabase;\n    constructor(){\n        this.ology = new Graph();\n        this.entities = {\n            Nodes: new Map(),\n            Edges: new Map(),\n            OutEdges: new Map(),\n            InEdges: new Map()\n        };\n    }\n    getNode(id: NodeId) : NiceNode | null {\n        return this.entities.Nodes.get(id);\n    }\n    addNode(id: NodeId, attrs : AttributeMap) : NiceNode {\n        const n = new NiceNode(this, id, attrs);\n        this.ology.addNode(id, attrs);\n        this.entities.Nodes.set(id, n);\n        return n\n    }\n    updateNode(id: NodeId, attrs : AttributeMap) {\n        const n = this.getNode(id);\n        let mergeResult = this.ology.mergeNode(id, attrs);\n        console.info({id, mergeResult});\n        n.attrs = attrs;\n    }\n    deleteNode(id: NodeId) {\n        this.ology.dropNode(id);\n        const n = this.getNode(id);\n        this.entities.Nodes.delete(id);\n        this.entities.InEdges.delete(n);\n        this.entities.OutEdges.delete(n);\n    }\n    getEdge(id : EdgeId) : NiceEdge | null {\n        return this.entities.Edges.get(id);\n    }\n    addEdge(id: EdgeId, attrs : AttributeMap) {\n        const [fromId, toId] = id.split(\",\");\n        const from = this.getNode(fromId);\n        const to = this.getNode(toId);\n        const e = new NiceEdge(this, from, to, \"friend\", attrs);\n        this.entities.Edges.set(id, e);\n        this.entities.OutEdges.get(from).add(e);\n        this.entities.InEdges.get(to).add(e);\n    }\n    updateEdge(id : string, attrs : AttributeMap) {\n        const e = this.getEdge(id);\n        e.attrs = attrs;\n        this.ology.mergeEdgeAttributes(id, attrs);\n    }\n    deleteEdge(id : string) {\n        const e = this.getEdge(id);\n        this.entities.Edges.delete(id);\n        this.entities.OutEdges.get(e.from).delete(e);\n        this.entities.InEdges.get(e.to).delete(e);\n        this.ology.dropEdge(id);\n    }\n}\n\nexport { NiceEdge, NiceGraph, NiceNode };\n\n"],"names":[],"version":3,"file":"types.d.ts.map"}